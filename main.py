{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"18ViJAstPPQQ0UCzyx0yoneE-NrYz4tWx","timestamp":1713456781761}],"authorship_tag":"ABX9TyM3MHn8LmV9pn0pg4Ggj41a"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Data processing #\n","import pandas as pd # Data processing - CSV file I/O.\n","import numpy as np\n","\n","# Data analysis & visualization #\n","import matplotlib #collection of functions for scientific and publication-ready visualization\n","import matplotlib.pyplot as plt # Show image\n","\n","# Model evaluation #\n","from sklearn.utils import shuffle\n","from sklearn.utils import all_estimators\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score\n","\n","# ROC Plot #\n","from sklearn.metrics import RocCurveDisplay"],"metadata":{"id":"kmhtBHLhLOZM","executionInfo":{"status":"ok","timestamp":1713461459902,"user_tz":-480,"elapsed":465,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"id":"H4MWznUZrbf1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713459937031,"user_tz":-480,"elapsed":8817,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"603fd367-19b7-41b1-a925-d6dbfff00a3c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (1.4.0)\n"]}],"source":["# Save & Loan Model #\n","!pip install joblib\n","import joblib"]},{"cell_type":"code","source":["!pip install Flask\n","from flask import Flask, request, jsonify"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QXnSNqWk_xej","executionInfo":{"status":"ok","timestamp":1713460959576,"user_tz":-480,"elapsed":22972,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"c6ebb285-7237-44b9-d72d-4ed522b86ad6"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: Flask in /usr/local/lib/python3.10/dist-packages (2.2.5)\n","Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask) (3.0.2)\n","Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask) (3.1.3)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask) (2.2.0)\n","Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask) (8.1.7)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=3.0->Flask) (2.1.5)\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"byi335KszHfE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713459975376,"user_tz":-480,"elapsed":31167,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"b76483c9-441e-4bb5-c84e-fd9c2a8ed28b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["df_X_train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/X_train.csv')\n","df_y_train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/y_train.csv')\n","df_X_validate = pd.read_csv('/content/drive/My Drive/Colab Notebooks/X_validate.csv')\n","df_y_validate = pd.read_csv('/content/drive/My Drive/Colab Notebooks/y_validate.csv')\n","df_X_test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/X_test.csv')\n","df_y_test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/y_test.csv')"],"metadata":{"id":"HYcoSeEIy-3Q","executionInfo":{"status":"ok","timestamp":1713460024941,"user_tz":-480,"elapsed":3564,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["clf_dt = joblib.load(\"/content/drive/My Drive/Colab Notebooks/CCP_01_DT.h5\")\n","#result = clf_dt.score(df_X_test, df_y_test)\n","#print(result)"],"metadata":{"id":"v6kBZcWdrsF4","executionInfo":{"status":"ok","timestamp":1713460034479,"user_tz":-480,"elapsed":2274,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["result = clf_dt.score(df_X_test, df_y_test)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uFIQ1mf5ZOKu","executionInfo":{"status":"ok","timestamp":1713463713912,"user_tz":-480,"elapsed":592,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"3bbd1666-a79b-4d22-c4bb-2717b144d99e"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8085106382978723\n"]}]},{"cell_type":"code","source":["# Predict the classes on the test data.\n","y_pred = clf_dt.predict(df_X_test)\n","y_pred"],"metadata":{"id":"SQy50HQ5rsBr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713460041615,"user_tz":-480,"elapsed":428,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"87a837ea-bfcb-491e-ab5d-b5b8b6eb4901"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n","       0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n","       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n","       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","       1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n","       0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n","       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n","       0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,\n","       0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,\n","       0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,\n","       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n","       1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,\n","       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n","       1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0,\n","       1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n","       1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,\n","       0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n","       0])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Predict the classes on the test data, and return the probabilities for each class\n","y_proba = clf_dt.predict_proba(df_X_test)\n","y_proba"],"metadata":{"id":"7cw_Aim-rr-E","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713460046247,"user_tz":-480,"elapsed":468,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"006fea02-8e14-4322-cad5-a1db22019ba7"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.16494845, 0.83505155],\n","       [0.51428571, 0.48571429],\n","       [1.        , 0.        ],\n","       ...,\n","       [1.        , 0.        ],\n","       [1.        , 0.        ],\n","       [0.90909091, 0.09090909]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["print(confusion_matrix(df_y_test, y_pred))"],"metadata":{"id":"IVWD9wC06UIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713460128497,"user_tz":-480,"elapsed":4,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"30a98fcb-396c-492e-f650-fbcc6a1123e1"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[[463  55]\n"," [ 80 107]]\n"]}]},{"cell_type":"code","source":["print(classification_report(df_y_test, y_pred, labels=[0,1]))"],"metadata":{"id":"ze2C9zDY6VHC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713460133907,"user_tz":-480,"elapsed":427,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"ccdcba73-88fa-48fa-93f9-f9dccbc24597"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.85      0.89      0.87       518\n","           1       0.66      0.57      0.61       187\n","\n","    accuracy                           0.81       705\n","   macro avg       0.76      0.73      0.74       705\n","weighted avg       0.80      0.81      0.80       705\n","\n"]}]},{"cell_type":"code","source":["RocCurveDisplay.from_predictions(df_y_test, y_proba[:, 1])\n","plt.axis(\"square\")\n","plt.xlabel(\"False Positive Rate\")\n","plt.ylabel(\"True Positive Rate\")\n","plt.title(\"Receiver Operating Characteristic (ROC)\")\n","plt.legend()\n","plt.show()"],"metadata":{"id":"THtS0qF-6mVb","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1713462667720,"user_tz":-480,"elapsed":1660,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"4052c015-14b5-499c-9285-7d7be4edcc04"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["app = Flask(__name__)\n","\n","@app.route(\"/\", method=[\"GET\", \"POST\"])\n","def index():\n","    if request.method == \"POST\":\n","        #if file == None or file.filename == \"\":\n","        if \"file\" not in request.files:\n","            return jsonify({\"error\": \"no file\"})\n","        try:\n","            #data = {\"Prediction\": int(y_pred)}\n","            data = {\"Prediction\": int(np.argmax(y_pred))}\n","            return jsonify(data)\n","        except Exception as e:\n","            return jsonify({\"error\": str(e)})\n","    return \"OK\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":382},"id":"dzn-HSz1DQSL","executionInfo":{"status":"error","timestamp":1713462922158,"user_tz":-480,"elapsed":515,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"1a5efac3-a335-412b-89ed-4aecee04e2d8"},"execution_count":37,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"Rule.__init__() got an unexpected keyword argument 'method'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-992fa5e83e80>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mapp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"GET\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;31m#if file == None or file.filename == \"\":\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/flask/scaffold.py\u001b[0m in \u001b[0;36mdecorator\u001b[0;34m(f)\u001b[0m\n\u001b[1;32m    447\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mdecorator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT_route\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT_route\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    448\u001b[0m             \u001b[0mendpoint\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"endpoint\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 449\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_url_rule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mendpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    450\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    451\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/flask/scaffold.py\u001b[0m in \u001b[0;36mwrapper_func\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     48\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapper_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_setup_finished\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupdate_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrapper_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/flask/app.py\u001b[0m in \u001b[0;36madd_url_rule\u001b[0;34m(self, rule, endpoint, view_func, provide_automatic_options, **options)\u001b[0m\n\u001b[1;32m   1352\u001b[0m         \u001b[0mmethods\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mrequired_methods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1354\u001b[0;31m         \u001b[0mrule\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murl_rule_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethods\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethods\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1355\u001b[0m         \u001b[0mrule\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprovide_automatic_options\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprovide_automatic_options\u001b[0m  \u001b[0;31m# type: ignore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1356\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Rule.__init__() got an unexpected keyword argument 'method'"]}]},{"cell_type":"code","source":["if __name__ == \"__main__\":\n","    app.run(debug=true)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"z9FAVITwJy40","executionInfo":{"status":"error","timestamp":1713462942302,"user_tz":-480,"elapsed":556,"user":{"displayName":"Datamazing My","userId":"04728917878036675364"}},"outputId":"c7b9e281-22d6-4fbd-a917-6083567e90b6"},"execution_count":38,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'true' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-74ac4b659b29>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mapp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'true' is not defined"]}]}]}